package com.gal.numbersensemode;

import java.io.File;
import java.io.IOException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import processing.app.RunnerListener;
import processing.app.Sketch;
import processing.app.Base;
import processing.app.Editor;
import processing.app.EditorState;
import processing.app.Mode;
import processing.app.SketchCode;
import processing.app.SketchException;
import processing.mode.java.JavaBuild;
import processing.mode.java.JavaMode;
import processing.mode.java.runner.Runner;

/**
 * Mode for enabling real-time modifications to numbers in the code.
 *
 */
public class NumberSenseMode extends JavaMode {
    public NumberSenseMode(Base base, File folder) {
        super(base, folder);
    }

    /**
     * Return the pretty/printable/menu name for this mode. This is separate
     * from the single word name of the folder that contains this mode. It could
     * even have spaces, though that might result in sheer madness or total
     * mayhem.
     */
    @Override
    public String getTitle() {
        return "Number Sense Mode";
    }

    /**
     * Create a new editor associated with this mode.
     */
    /*
    @Override
    public Editor createEditor(Base base, String path, EditorState state) {
        return null;
    }
    */

    /**
     * Returns the default extension for this editor setup.
     */
    /*
    @Override
    public String getDefaultExtension() {
        return null;
    }
    */

    /**
     * Returns a String[] array of proper extensions.
     */
    /*
    @Override
    public String[] getExtensions() {
        return null;
    }
    */

    /**
     * Get array of file/directory names that needn't be copied during "Save
     * As".
     */
    /*
    @Override
    public String[] getIgnorable() {
        return null;
    }
    */
    
    /**
     * Retrieve the ClassLoader for JavaMode. This is used by Compiler to load
     * ECJ classes. Thanks to Ben Fry.
     *
     * @return the class loader from java mode
     */
    @Override
    public ClassLoader getClassLoader() {
        for (Mode m : base.getModeList()) {
            if (m.getClass() == JavaMode.class) {
                JavaMode jMode = (JavaMode) m;
                return jMode.getClassLoader();
            }
        }
        return null;  // badness
    }

    @Override
    public Runner handleRun(Sketch sketch, RunnerListener listener) throws SketchException {
    	System.out.println("I'm handling run now!!!????");
    	
    	automateSketch(sketch);
    	
        JavaBuild build = new JavaBuild(sketch);
        String appletClassName = build.build(false);
        if (appletClassName != null) {
          final Runner runtime = new Runner(build, listener);
          new Thread(new Runnable() {
            public void run() {
              runtime.launch(false);  // this blocks until finished
            }
          }).start();
          return runtime;
        }
        return null;    	
    }
    
    private boolean automateSketch(Sketch sketch)
    {
    	SketchCode[] code = sketch.getCode();
    	Number[] numbers = new Number[128];
    	
    	if (code.length<1)
    		return false;
    	
    	// modify the code below
        int numCount = 0;
    	String varName = "numbersense_var";
    	
    	for (int i=0; i<code.length; i++)
    	{
    		String c = new String(code[i].getProgram());
    		Pattern p = Pattern.compile("(\\d+\\.*\\d*)");
    		Matcher m = p.matcher(c);
        
    		while (m.find())
    		{
    			String name = varName + "_" + numCount;
    			System.out.println(m.group(0));
    			if (m.group(0).contains(".")) {
    				numbers[numCount] = new Number("float", name, m.group(0), 0, m.start(), m.end());
    			}
    			else {
    				numbers[numCount] = new Number("int", name, m.group(0), 0, m.start(), m.end());        		
    			}
        
    			c = c.replaceFirst(m.group(0), name);
    			//code[i].setProgram(c);
    			numCount++;
    		}
    	}
        
    	// add all variable declarations to the first tab
    	String c = code[0].getProgram();

    	c += "\n\n\n\n" +
    		 "/****************************/\n" +
    		 "/* GENERATED BY NUMBERSENSE */\n" +
		 	 "/****************************/\n" +
    		 "\n";

    	for (int i=0; i<numCount; i++)
    	{
    		c += numbers[i].type + " " + numbers[i].name + " = " + numbers[i].value + ";\n";
    	}
    	
    	//code[0].setProgram(c);
    	
    	System.out.println("Modified code:");
    	for (int i=0; i<code.length; i++)
    	{
    		System.out.println("file " + i + "\n=======");
    		System.out.println(code[i].getProgram());
    	}

    	
    		 
    	return true;
    }
}
